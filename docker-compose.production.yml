version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: employee_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secure_root_password_2024!}
      MYSQL_DATABASE: employee_management
      MYSQL_USER: emp_prod_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-secure_production_password_2024!}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./Backend/database-production-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./Backend/database-migration.sql:/docker-entrypoint-initdb.d/02-migration.sql
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=1G
      --max-connections=200
      --query-cache-size=64M
      --slow-query-log=1
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-secure_root_password_2024!}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s
    networks:
      - employee-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot Backend
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      args:
        - SPRING_PROFILES_ACTIVE=prod
    container_name: employee_backend_prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/employee_management?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: emp_prod_user
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-secure_production_password_2024!}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      CORS_ALLOWED_ORIGINS: ${FRONTEND_URL:-https://employee-frontend.netlify.app}
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-for-production-use-256-bit-key}
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_COM_EMPLOYEEMS: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/demo/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - employee-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # React Frontend
  frontend:
    build:
      context: ./ems
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - VITE_API_BASE_URL=${BACKEND_URL:-http://localhost:8080}
    container_name: employee_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
    networks:
      - employee-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: employee_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024!}
    volumes:
      - redis_prod_data:/data
    networks:
      - employee-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: employee_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - employee-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  employee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
